@page "/users"
@attribute [StreamRendering]

<PageHeader Title="Users Management" />

<MudTable Items=@users
    Loading=userLoading Hover=true Striped=true Dense=true
    Filter="new Func<UserDto,bool>(FilterFunc)">

    <ToolBarContent>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Delete" OnClick=OpenCreateModalAsync>
            Create
        </MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchValue"
            Placeholder="Search"
            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
            IconSize="Size.Medium"
            Class="mt-0">
        </MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>UserName</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>PhoneNumber</MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Sign">@context.UserName</MudTd>
        <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Phone">@context.PhoneNumber</MudTd>
        <MudTd>
            <MudIconButton 
                Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" aria-label="delete"
                OnClick="() => DeleteAsync(context.Id, context.UserName)" />
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>

</MudTable>

    @code {
    private IEnumerable<UserDto>? users { get; set; }

    private bool userLoading = false;

    private string searchValue = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        ToggleTableState();

        users = (await UserService.GetAsync()).Data;

        ToggleTableState();
    }

    private void ToggleTableState()
    {
        userLoading = !userLoading;

        StateHasChanged();
    }

    private bool FilterFunc(UserDto element)
    {
        if (string.IsNullOrWhiteSpace(searchValue))
            return true;

        if (!string.IsNullOrEmpty(element.UserName)
            && element.UserName.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(element.PhoneNumber)
            && element.PhoneNumber.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task OpenCreateModalAsync()
    {
        var options = new DialogOptions
        {
            BackdropClick = false,
            CloseOnEscapeKey = false,
            CloseButton = true,
        };

        var dialog = await DialogService.ShowAsync<AddUser_Modal>("Create New User", options);

        var dialogResult = await dialog.Result;

        if (dialogResult!.Canceled is false)
        {
            var result = dialogResult.Data as Result;

            if (result!.Succeeded)
            {
                await LoadUsersAsync();
            }
                
        }
    }

    private async Task DeleteAsync(string id, string? userName)
    {
        var result = await ExecuteService.CallGuardedAsync(
            () => UserService.DeleteAsync(id),
            $"User {userName} deleted");

        if (result.Succeeded)
            await LoadUsersAsync();
    }
}
